/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/germline Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/
manifest {
    mainScript = "main.nf"
    description = 'Germline pipelines (mirroring snappy version)'
    nextflowVersion = '>= 20.07.0'
}


env.pipelinework = "/pipelinework" # path to directory with reference files & panel targets


pipelinework = env.pipelinework


/*
###common paths and resources###
*/
params.out_dir = "$pipelinework/output"
params.fastq_files = "$pipelinework/fastq/*_R{1,2}_001.fastq.gz"
params.ref_fasta = "$pipelinework/genome/human_g1k_v37_decoy.fasta"
params.ref_fasta_fai = "$pipelinework/genome/human_g1k_v37_decoy.fasta.fai"
params.ref_chromsizes = "$pipelinework/genome/human_g1k_v37_decoy.chromsizes"
params.ref_sequence_dict = "$pipelinework/genome/human_g1k_v37_decoy.dict"
params.ref_fasta_bm2 = "$pipelinework/genome/hg38/bwa_mem2/human_hg38.fa"
params.ref_bwa_index = "$pipelinework/genome/human_g1k_v37_decoy.bwa.{amb,ann,bwt,pac,sa}"
params.ref_gatk_resources = "$pipelinework/gatk_resources/*"
params.ref_gene = "$pipelinework/genome/refGene"


/*
###Assay-specific paths and custom configurations###
*/


params {
    sureselect_adapters = "$pipelinework/adapters/SureSelectQXT.fa"
    cutadapt_config ="--minimum-length=1"
    umi_extract_config ="--extract-method=string --bc-pattern2='NNNNNNNNNNNN' --quality-filter-threshold=30"
    bwa_mem_config =""
    target_file = "$pipelinework/targets/llgp2/llgp2_coding_only_target.bed"
    roi_file = "$pipelinework/targets/llgp2/llgp2_roi.bed"
    exomedepth = "$pipelinework/targets/llgp2/llgp2_exomedepth.bed"
    exomedepth_threshold = "0.0001"
    exomedepth_plot_pon = "false"
    exomedepth_plot_batch = "true"
    normals = "$pipelinework/targets/llgp2/LLGP_normals.RData"
    variation = "$pipelinework/targets/llgp2/llgp2_exac_snp_intersect.vcf.gz"
}

/*
###software specified resouces NOTE: see process resources below for docker resources which should be compatible###
*/

params {
    resources {
        bwa_mem {
            cpu ="8"
            mem ="16"
        }
        fgbio {
            java_mem="8g"
        }
    }  
}


/*
###process config###
*/


process {
     shell = [ '/bin/bash', '-euo', 'pipefail' ]
}



process {
     withName:"bwa_mem|bwa_realign" {
         container = "seglh/legacy_pr_snappy_bwa:4.0.0"
     }
     withName:"trimmomatic|cutadapt" {
         container = "seglh/legacy_pr_snappy_trimmomatic:4.0.0"
     }
     withName:"fastqc"{
         container = "seglh/legacy_pr_snappy_fastqc:4.0.0"
     }
     withName:"markduplicates"{
         container = "seglh/legacy_pr_snappy_picard:4.0.0"
     }
     withName:"bamSort"{
         container = "seglh/legacy_pr_snappy_ngstools:4.0.0"
     }
     withName:"clip_primers2|multiple_metrics"{
         container = "seglh/legacy_pr_snappy_picard:4.0.0"
     }
     withName:"samtools_depth|samtools_coverage"{
         container = "seglh/kpm_snappy_python3_ngstools:1.0.1"
     }
     withName:"verifyBamID"{
         container = "preciserobot/snappy_bamutil:4.0.0"
     }
     withName:"recalibration_table|bam_recalibrate"{
         container = "broadinstitute/gatk:4.0.3.0"
     }
     withName:"haplotype_caller"{
         container = "broadinstitute/gatk:4.0.3.0"
     }
     withName:"roi_coverage"{
         container = "seglh/legacy_pr_snappy_ngstools:4.0.0"
     }
     withName:"variantStats"{
         container = "seglh/legacy_pr_snappy_ngstools:4.0.0"
     }
     withName:"selectVariants|variantFiltration"{
         container = "broadinstitute/gatk:4.0.3.0"
     }
     withName:"sortVCF"{
         container = "seglh/legacy_pr_snappy_picard:4.0.0"
     }
     withName:"readCount|exomedepth"{
        container = "kingspm/snappy_exomedepth:3.2.3"
     }
     withName:"collateMetrics"{
        container = "seglh/collatemetrics:1.0.0"
     }
}


docker {
    enabled = true
}

executor {
    queueSize = 100
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' :
    'finish'
    }
    maxRetries = 1
}

process {

    withLabel: standard_compute {
    cpus = { 4 * task.attempt }
    memory = { 8.GB * task.attempt }
    }
    withLabel: big_mem {
    cpus = { 8 * task.attempt }
    memory = { 16.GB * task.attempt }
    }
    withLabel: bigger_mem {
    cpus = { 8 * task.attempt }
    memory = { 24.GB * task.attempt }
    }
    withLabel: bwa_mem {
    cpus = { 8 * task.attempt }
    memory = { 16.GB * task.attempt }
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "execution_trace_${trace_timestamp}.txt"
}


  




